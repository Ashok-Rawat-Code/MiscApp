"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = void 0;
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
const abort_controller_1 = require("abort-controller");
const form_data_1 = __importDefault(require("form-data"));
const node_fetch_1 = __importStar(require("node-fetch"));
const util_1 = require("util");
const ApiError_1 = require("./ApiError");
const CancelablePromise_1 = require("./CancelablePromise");
const OpenAPI_1 = require("./OpenAPI");
function isDefined(value) {
    return value !== undefined && value !== null;
}
function isString(value) {
    return typeof value === 'string';
}
function isStringWithValue(value) {
    return isString(value) && value !== '';
}
function isBlob(value) {
    return value instanceof Blob;
}
function isBinary(value) {
    const isBuffer = Buffer.isBuffer(value);
    const isArrayBuffer = util_1.types.isArrayBuffer(value);
    const isArrayBufferView = util_1.types.isArrayBufferView(value);
    return isBuffer || isArrayBuffer || isArrayBufferView;
}
function base64(str) {
    try {
        return btoa(str);
    }
    catch (err) {
        return Buffer.from(str).toString('base64');
    }
}
function getQueryString(params) {
    const qs = [];
    Object.keys(params).forEach(key => {
        const value = params[key];
        if (isDefined(value)) {
            if (Array.isArray(value)) {
                value.forEach(value => {
                    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);
                });
            }
            else {
                qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);
            }
        }
    });
    if (qs.length > 0) {
        return `?${qs.join('&')}`;
    }
    return '';
}
function getUrl(options) {
    const path = OpenAPI_1.OpenAPI.ENCODE_PATH ? OpenAPI_1.OpenAPI.ENCODE_PATH(options.path) : options.path;
    const url = `${OpenAPI_1.OpenAPI.BASE}${path}`;
    if (options.query) {
        return `${url}${getQueryString(options.query)}`;
    }
    return url;
}
function getFormData(options) {
    if (options.formData) {
        const formData = new form_data_1.default();
        Object.keys(options.formData).forEach(key => {
            var _a;
            const value = (_a = options.formData) === null || _a === void 0 ? void 0 : _a[key];
            if (isDefined(value)) {
                formData.append(key, value);
            }
        });
        return formData;
    }
    return;
}
function resolve(options, resolver) {
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof resolver === 'function') {
            return resolver(options);
        }
        return resolver;
    });
}
function getHeaders(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const token = yield resolve(options, OpenAPI_1.OpenAPI.TOKEN);
        const username = yield resolve(options, OpenAPI_1.OpenAPI.USERNAME);
        const password = yield resolve(options, OpenAPI_1.OpenAPI.PASSWORD);
        const additionalHeaders = yield resolve(options, OpenAPI_1.OpenAPI.HEADERS);
        const defaultHeaders = Object.entries(Object.assign(Object.assign({ Accept: 'application/json' }, additionalHeaders), options.headers))
            .filter(([_, value]) => isDefined(value))
            .reduce((headers, [key, value]) => (Object.assign(Object.assign({}, headers), { [key]: value })), {});
        const headers = new node_fetch_1.Headers(defaultHeaders);
        if (isStringWithValue(token)) {
            headers.append('Authorization', `Bearer ${token}`);
        }
        if (isStringWithValue(username) && isStringWithValue(password)) {
            const credentials = base64(`${username}:${password}`);
            headers.append('Authorization', `Basic ${credentials}`);
        }
        if (options.body) {
            if (options.mediaType) {
                headers.append('Content-Type', options.mediaType);
            }
            else if (isBinary(options.body)) {
                headers.append('Content-Type', 'application/octet-stream');
            }
            else if (isString(options.body)) {
                headers.append('Content-Type', 'text/plain');
            }
            else {
                headers.append('Content-Type', 'application/json');
            }
        }
        return headers;
    });
}
function getRequestBody(options) {
    var _a;
    if (options.body) {
        if ((_a = options.mediaType) === null || _a === void 0 ? void 0 : _a.includes('/json')) {
            return JSON.stringify(options.body);
        }
        else if (isString(options.body) || isBlob(options.body) || isBinary(options.body)) {
            return options.body;
        }
        else {
            return JSON.stringify(options.body);
        }
    }
    return;
}
function sendRequest(options, url, formData, body, headers, onCancel) {
    return __awaiter(this, void 0, void 0, function* () {
        const controller = new abort_controller_1.AbortController();
        const request = {
            headers,
            method: options.method,
            body: body || formData,
            signal: controller.signal,
        };
        onCancel(() => controller.abort());
        return yield (0, node_fetch_1.default)(url, request);
    });
}
function getResponseHeader(response, responseHeader) {
    if (responseHeader) {
        const content = response.headers.get(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return;
}
function getResponseBody(response) {
    return __awaiter(this, void 0, void 0, function* () {
        if (response.status !== 204) {
            try {
                const contentType = response.headers.get('Content-Type');
                if (contentType) {
                    const isJSON = contentType.toLowerCase().startsWith('application/json');
                    if (isJSON) {
                        return yield response.json();
                    }
                    else {
                        return yield response.text();
                    }
                }
            }
            catch (error) {
                console.error(error);
            }
        }
        return;
    });
}
function catchErrors(options, result) {
    const errors = Object.assign({ 400: 'Bad Request', 401: 'Unauthorized', 403: 'Forbidden', 404: 'Not Found', 500: 'Internal Server Error', 502: 'Bad Gateway', 503: 'Service Unavailable' }, options.errors);
    const error = errors[result.status];
    if (error) {
        throw new ApiError_1.ApiError(result, error);
    }
    if (!result.ok) {
        throw new ApiError_1.ApiError(result, 'Generic Error');
    }
}
/**
 * Request using node-fetch client
 * @param options The request options from the the service
 * @returns CancelablePromise<T>
 * @throws ApiError
 */
function request(options) {
    return new CancelablePromise_1.CancelablePromise((resolve, reject, onCancel) => __awaiter(this, void 0, void 0, function* () {
        try {
            const url = getUrl(options);
            const formData = getFormData(options);
            const body = getRequestBody(options);
            const headers = yield getHeaders(options);
            if (!onCancel.isCancelled) {
                const response = yield sendRequest(options, url, formData, body, headers, onCancel);
                const responseBody = yield getResponseBody(response);
                const responseHeader = getResponseHeader(response, options.responseHeader);
                const result = {
                    url,
                    ok: response.ok,
                    status: response.status,
                    statusText: response.statusText,
                    body: responseHeader || responseBody,
                };
                catchErrors(options, result);
                resolve(result.body);
            }
        }
        catch (error) {
            reject(error);
        }
    }));
}
exports.request = request;
