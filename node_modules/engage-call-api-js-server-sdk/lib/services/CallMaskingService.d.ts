import type { AssociationListResponse } from '../models/AssociationListResponse';
import type { AssociationResponse } from '../models/AssociationResponse';
import type { CreateAssociation } from '../models/CreateAssociation';
import type { MaskedNumberPoolListResponse } from '../models/MaskedNumberPoolListResponse';
import type { MaskingNumberPoolPatchRequest } from '../models/MaskingNumberPoolPatchRequest';
import type { MaskingNumberPoolPutRequest } from '../models/MaskingNumberPoolPutRequest';
import type { MaskingNumberPoolRequest } from '../models/MaskingNumberPoolRequest';
import type { MaskingNumberPoolResponse } from '../models/MaskingNumberPoolResponse';
import type { PhoneNumberList } from '../models/PhoneNumberList';
import type { Pool } from '../models/Pool';
import type { StandardRequestParameters } from '../models/StandardRequestParameters';
import type { CancelablePromise } from '../core/CancelablePromise';
export declare class CallMaskingService {
    /**
     * Get All Pools
     * @param acId Account Id of the tenant who is try to perform the operation
     * @param limit (Optional Parameter) Integer value specifing the limit of rooms to be returned in response.
     * @param offset (Optional Parameter) Integer value specifing the offset to fetch in the paginated room list.
     * @param poolName poolName
     * @returns MaskedNumberPoolListResponse successful operation
     * @throws ApiError
     */
    static getAllPool(acId: string, limit?: number, offset?: number, poolName?: string): CancelablePromise<MaskedNumberPoolListResponse>;
    /**
     * Create Pool
     * @param acId Account Id of the tenant who is try to perform the operation
     * @param requestBody Mask Number pool request body
     * @returns MaskingNumberPoolResponse successful operation
     * @throws ApiError
     */
    static createPool(acId: string, requestBody: MaskingNumberPoolRequest): CancelablePromise<MaskingNumberPoolResponse>;
    /**
     * GET Specific Pool
     * @param acId Account Id of the tenant who is try to perform the operation
     * @param poolName Unique Pool Name
     * @param transactionId Transaction id to get result of pool create/update/delete request (optional field)
     * @returns Pool successful operation
     * @throws ApiError
     */
    static getSpecificPool(acId: string, poolName: string, transactionId?: string): CancelablePromise<Pool>;
    /**
     * Update Pool
     * @param acId Account Id
     * @param poolName Unique Pool Name
     * @param requestBody Mask Number pool put request body
     * @returns MaskingNumberPoolResponse successful operation
     * @throws ApiError
     */
    static updatePool(acId: string, poolName: string, requestBody: MaskingNumberPoolPutRequest): CancelablePromise<MaskingNumberPoolResponse>;
    /**
     * Delete Pool
     * @param acId Account Id
     * @param poolName Unique Pool Name
     * @returns MaskingNumberPoolResponse successful operation
     * @throws ApiError
     */
    static deletePool(acId: string, poolName: string): CancelablePromise<MaskingNumberPoolResponse>;
    /**
     * Get Unique Pool Name
     * @param acId Account Id
     * @param poolName Unique Pool Name
     * @returns any successful operation
     * @throws ApiError
     */
    static getHeadPool(acId: string, poolName: string): CancelablePromise<any>;
    /**
     * Update Pool (Patch)
     * @param acId Account Id
     * @param poolName Unique Pool Name
     * @param requestBody Mask Number pool patch request body. All fields are optional but atleast one field is mandatory in Patch request body.
     * @returns MaskingNumberPoolResponse successful operation
     * @throws ApiError
     */
    static patchPool(acId: string, poolName: string, requestBody: MaskingNumberPoolPatchRequest): CancelablePromise<MaskingNumberPoolResponse>;
    /**
     * Create Association
     * @param acId accountId
     * @param requestBody
     * @returns AssociationResponse successful operation
     * @throws ApiError
     */
    static createAssociation(acId: string, requestBody?: CreateAssociation): CancelablePromise<AssociationResponse>;
    /**
     * Get All Associations
     * @param acId
     * @param poolName
     * @param maskNumber
     * @param party
     * @param pin
     * @param limit
     * @param offset
     * @returns AssociationListResponse successful operation
     * @throws ApiError
     */
    static getAllAssociation(acId: string, poolName: string, maskNumber?: string, party?: string, pin?: string, limit?: number, offset?: number): CancelablePromise<AssociationListResponse>;
    /**
     * Delete Association
     * @param acId
     * @param associationId
     * @returns void
     * @throws ApiError
     */
    static deleteAssociation(acId: string, associationId: string): CancelablePromise<void>;
    /**
     * Get Association
     * @param acId
     * @param associationId
     * @returns AssociationResponse successful operation
     * @throws ApiError
     */
    static getAssociation(acId: string, associationId: string): CancelablePromise<AssociationResponse>;
    /**
     * Execute Association During Call
     * @param acId accountId
     * @param requestBody
     * @returns any successful operation
     * @throws ApiError
     */
    static createCallForAssociation(acId: string, requestBody?: StandardRequestParameters): CancelablePromise<{
        otherParty?: string;
    }>;
    /**
     * Get Free Phone Numbers
     * API to get all free phone numbers
     * @param acId Account Id
     * @param status Phone Number allocation status
     * @param limit
     * @param offset
     * @returns PhoneNumberList successful operation
     * @throws ApiError
     */
    static getAvailablePhoneNumbers(acId: string, status: string, limit?: number, offset?: number): CancelablePromise<PhoneNumberList>;
}
