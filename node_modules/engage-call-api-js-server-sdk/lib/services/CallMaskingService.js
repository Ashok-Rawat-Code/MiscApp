"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallMaskingService = void 0;
const request_1 = require("../core/request");
class CallMaskingService {
    /**
     * Get All Pools
     * @param acId Account Id of the tenant who is try to perform the operation
     * @param limit (Optional Parameter) Integer value specifing the limit of rooms to be returned in response.
     * @param offset (Optional Parameter) Integer value specifing the offset to fetch in the paginated room list.
     * @param poolName poolName
     * @returns MaskedNumberPoolListResponse successful operation
     * @throws ApiError
     */
    static getAllPool(acId, limit, offset, poolName) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v2/accounts/${acId}/cms/pool`,
            query: {
                'Limit': limit,
                'Offset': offset,
                'PoolName': poolName,
            },
            errors: {
                400: `Bad Request`,
                500: `Internal Server Error`,
            },
        });
    }
    /**
     * Create Pool
     * @param acId Account Id of the tenant who is try to perform the operation
     * @param requestBody Mask Number pool request body
     * @returns MaskingNumberPoolResponse successful operation
     * @throws ApiError
     */
    static createPool(acId, requestBody) {
        return (0, request_1.request)({
            method: 'POST',
            path: `/v2/accounts/${acId}/cms/pool`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                500: `Internal Server Error`,
            },
        });
    }
    /**
     * GET Specific Pool
     * @param acId Account Id of the tenant who is try to perform the operation
     * @param poolName Unique Pool Name
     * @param transactionId Transaction id to get result of pool create/update/delete request (optional field)
     * @returns Pool successful operation
     * @throws ApiError
     */
    static getSpecificPool(acId, poolName, transactionId) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v2/accounts/${acId}/cms/pool/${poolName}`,
            query: {
                'TransactionId': transactionId,
            },
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                500: `Internal Server Error`,
            },
        });
    }
    /**
     * Update Pool
     * @param acId Account Id
     * @param poolName Unique Pool Name
     * @param requestBody Mask Number pool put request body
     * @returns MaskingNumberPoolResponse successful operation
     * @throws ApiError
     */
    static updatePool(acId, poolName, requestBody) {
        return (0, request_1.request)({
            method: 'PUT',
            path: `/v2/accounts/${acId}/cms/pool/${poolName}`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                500: `Internal Server Error`,
            },
        });
    }
    /**
     * Delete Pool
     * @param acId Account Id
     * @param poolName Unique Pool Name
     * @returns MaskingNumberPoolResponse successful operation
     * @throws ApiError
     */
    static deletePool(acId, poolName) {
        return (0, request_1.request)({
            method: 'DELETE',
            path: `/v2/accounts/${acId}/cms/pool/${poolName}`,
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                500: `Internal Server Error`,
            },
        });
    }
    /**
     * Get Unique Pool Name
     * @param acId Account Id
     * @param poolName Unique Pool Name
     * @returns any successful operation
     * @throws ApiError
     */
    static getHeadPool(acId, poolName) {
        return (0, request_1.request)({
            method: 'HEAD',
            path: `/v2/accounts/${acId}/cms/pool/${poolName}`,
            errors: {
                400: `Bad Request`,
            },
        });
    }
    /**
     * Update Pool (Patch)
     * @param acId Account Id
     * @param poolName Unique Pool Name
     * @param requestBody Mask Number pool patch request body. All fields are optional but atleast one field is mandatory in Patch request body.
     * @returns MaskingNumberPoolResponse successful operation
     * @throws ApiError
     */
    static patchPool(acId, poolName, requestBody) {
        return (0, request_1.request)({
            method: 'PATCH',
            path: `/v2/accounts/${acId}/cms/pool/${poolName}`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                500: `Internal Server Error`,
            },
        });
    }
    /**
     * Create Association
     * @param acId accountId
     * @param requestBody
     * @returns AssociationResponse successful operation
     * @throws ApiError
     */
    static createAssociation(acId, requestBody) {
        return (0, request_1.request)({
            method: 'POST',
            path: `/v2/accounts/${acId}/cms/association`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                408: `Request Timeout`,
            },
        });
    }
    /**
     * Get All Associations
     * @param acId
     * @param poolName
     * @param maskNumber
     * @param party
     * @param pin
     * @param limit
     * @param offset
     * @returns AssociationListResponse successful operation
     * @throws ApiError
     */
    static getAllAssociation(acId, poolName, maskNumber, party, pin, limit, offset) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v2/accounts/${acId}/cms/association`,
            query: {
                'PoolName': poolName,
                'MaskNumber': maskNumber,
                'Party': party,
                'Pin': pin,
                'Limit': limit,
                'Offset': offset,
            },
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                408: `Request Timeout`,
            },
        });
    }
    /**
     * Delete Association
     * @param acId
     * @param associationId
     * @returns void
     * @throws ApiError
     */
    static deleteAssociation(acId, associationId) {
        return (0, request_1.request)({
            method: 'DELETE',
            path: `/v2/accounts/${acId}/cms/association/${associationId}`,
            errors: {
                500: `Internal Server Error`,
            },
        });
    }
    /**
     * Get Association
     * @param acId
     * @param associationId
     * @returns AssociationResponse successful operation
     * @throws ApiError
     */
    static getAssociation(acId, associationId) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v2/accounts/${acId}/cms/association/${associationId}`,
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                408: `Request Timeout`,
            },
        });
    }
    /**
     * Execute Association During Call
     * @param acId accountId
     * @param requestBody
     * @returns any successful operation
     * @throws ApiError
     */
    static createCallForAssociation(acId, requestBody) {
        return (0, request_1.request)({
            method: 'POST',
            path: `/v2/accounts/${acId}/cms/call`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                408: `Request Timeout`,
            },
        });
    }
    /**
     * Get Free Phone Numbers
     * API to get all free phone numbers
     * @param acId Account Id
     * @param status Phone Number allocation status
     * @param limit
     * @param offset
     * @returns PhoneNumberList successful operation
     * @throws ApiError
     */
    static getAvailablePhoneNumbers(acId, status, limit, offset) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v2/accounts/${acId}/cms/phone-numbers`,
            query: {
                'status': status,
                'limit': limit,
                'offset': offset,
            },
            errors: {
                400: `Bad request`,
                408: `Request Timeout`,
            },
        });
    }
}
exports.CallMaskingService = CallMaskingService;
