import type { JoinRequest } from '../models/JoinRequest';
import type { JoinResponse } from '../models/JoinResponse';
import type { RoomBase } from '../models/RoomBase';
import type { RoomDetailRecord } from '../models/RoomDetailRecord';
import type { RoomDetailRecordItemList } from '../models/RoomDetailRecordItemList';
import type { RoomPlay } from '../models/RoomPlay';
import type { ServerResponse } from '../models/ServerResponse';
import type { CancelablePromise } from '../core/CancelablePromise';
export declare class MultipartyConferenceCallService {
    /**
     * Get all Rooms
     * Get details of all conference rooms based on specified filter criteria. A list of room detail records will be returned in response.<br />
     * @param acId Account Id of the tenant who is trying to perform the operation
     * @param roomName (Optional Parameter) This parameter looks for an exatact match in DB with the given value, and if room exits then record will be given, else empty list will be given as response.
     * @param createdAt (Optional Parameter) Room Creation time.
     * @param closedAt (Optional Parameter) Room Closing time.
     * @param status (Optional Parameter) Specifies the current room status
     * @param roomType (Optional Parameter) Specifies the Room Type
     * @param limit (Optional Parameter) Integer value specifing the limit of rooms to be returned in response.
     * @param offset (Optional Parameter) Integer value specifing the offset to fetch in the paginated room list.
     * @returns RoomDetailRecordItemList successful operation
     * @throws ApiError
     */
    static getMultipleRoomRecords(acId: string, roomName?: string, createdAt?: string, closedAt?: string, status?: 'CREATED' | 'RESERVED' | 'CLOSED', roomType?: 'Audio' | 'Video-VAS' | 'Video-CPV-6-split' | 'Video-CPV-4-split' | 'Video-CPV-ASL' | 'Video-CPV-DHL' | 'Video-CPV-auto-split', limit?: number, offset?: number): CancelablePromise<RoomDetailRecordItemList>;
    /**
     * Create Room
     * Create a conference room which allows multiple users to join.
     * @param acId Account Id of the tenant who is trying to perform the operation
     * @param requestBody
     * @returns RoomDetailRecord successful operation
     * @throws ApiError
     */
    static createRoom(acId: string, requestBody?: RoomBase): CancelablePromise<RoomDetailRecord>;
    /**
     * Get Room
     * Get details of specific room by providing it's room_ID
     * @param acId Account Id of the tenant who is trying to perform the operation
     * @param rmId Room ID, for which user wants to see the details
     * @returns RoomDetailRecord successful operation
     * @throws ApiError
     */
    static getRoomRecordByRoomId(acId: string, rmId: string): CancelablePromise<RoomDetailRecord>;
    /**
     * Delete room
     * Close an existing room. This API acts as a soft delete, which changes the room status to 'CLOSED' and makes the room unavailable for usage. The room record will still be available with a closed status.
     * @param acId Account Id of the tenant who is trying to perform the operation
     * @param rmId Room ID, for which user wants to perform the opration.
     * @returns RoomDetailRecord successful operation
     * @throws ApiError
     */
    static deleteRoom(acId: string, rmId: string): CancelablePromise<RoomDetailRecord>;
    /**
     * Join Room
     * Join to a specific conference room
     * @param acId Account Id of the tenant who is trying to perform the operation
     * @param rmId Room ID, for which user wants to perform the join operation
     * @param requestBody
     * @returns JoinResponse successful operation
     * @throws ApiError
     */
    static joinRoom(acId: string, rmId: string, requestBody?: JoinRequest): CancelablePromise<JoinResponse>;
    /**
     * Play Room
     * Play announcement in the Room.
     * @param acId Account Id of the tenant who is trying to perform the operation
     * @param rmId Room ID, for which user wants to perform the play operation
     * @param requestBody
     * @returns ServerResponse successful operation
     * @throws ApiError
     */
    static playAnnouncementInRoom(acId: string, rmId: string, requestBody?: RoomPlay): CancelablePromise<ServerResponse>;
}
