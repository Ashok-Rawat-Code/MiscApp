"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallService = void 0;
const request_1 = require("../core/request");
class CallService {
    /**
     * Make a voice or video call
     * Make an outbound voice or video call to one or more destinations. The destination can be PSTN or mobile phone, SIP endpoint, or WebRTC endpoint. The API returns a unique call identifier which can be used to refer this call in subsequent API request.
     * @param acId Account Id of the tenant who is try to perform the operation
     * @param requestBody
     * @returns CallSuccessResponse successful operation
     * @throws ApiError
     */
    static makeCall(acId, requestBody) {
        return (0, request_1.request)({
            method: 'POST',
            path: `/v1/accounts/${acId}/call`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                408: `Request Timeout`,
            },
        });
    }
    /**
     * Get Multiple Call Records
     * Get details of on-going or completed calls based on specified filter criteria. If the filter criteria matches with multiple calls, a list of call records will be returned in response.<br /><br /> This API has following flavors.<br /> **1> Fetch Ongoing Call Records** - If **EndTime** query parameter is **not** provided in the request, API returns list of ongoing Call Records for the given filters.<br /> **2> Fetch Completed Call Records** - If **EndTime** query parameter is provided in the request, API returns list of Completed Call Records for the given filters.
     * @param acId Account Id of the tenant who is try to perform the operation
     * @param to Optional. In outbound API call (A2P), this refers to called user phone number or client ID. In case of inbound (P2A), this refers to the EDP Phone number dialed by the calling user.  For PSTN or mobile phone, a E164 number should be specified. For SIP or WebRTC endpoint, an SIP-URI address 'sip:user@domain' should be specified.
     * @param startTime Optional. This parameter specifies the start time of the call.
     * @param endTime Optional. This parameter specifies the end time of the call. If EndTime is not specified this API returns only the on-going call details. To get the completed call details EndTime has to be specified.
     * @param status Optional. This parameter specifies the final status of the call.
     * @param flowType Optional. This specified call treatment flow.
     * @param channel Optional. This specified the call channel.
     * @param direction Optional. This parameter specifies the direction of the call from EDP platform's perspective. The value of 'inbound' means inbound call to EDP. The value of 'outbound-api' means call is initiated via REST API. The value of 'outbound-flow' means call is initiated by EML <Dial> verb or VDT flow.
     * @param callType Optional. This parameter specifies the call type. The values are 'AUDIO' or 'VIDEO' or 'AUDIO,VIDEO'
     * @param limit Optional. Integer value specifying the limit of call detail records to be returned in response
     * @param offset Optional. Integer value specifying the offset to fetch in the paginated call records list.
     * @returns CallDetailRecordItemList successful operation
     * @throws ApiError
     */
    static getMultipleCallRecords(acId, to, startTime, endTime, status, flowType, channel, direction, callType, limit, offset) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v1/accounts/${acId}/call`,
            query: {
                'To': to,
                'StartTime': startTime,
                'EndTime': endTime,
                'Status': status,
                'FlowType': flowType,
                'Channel': channel,
                'Direction': direction,
                'CallType': callType,
                'Limit': limit,
                'Offset': offset,
            },
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                408: `Request Timeout`,
            },
        });
    }
    /**
     * Get Call Record
     * Get details of an on-going or completed call.
     * @param acId Account Id of the tenant who is try to perform the operation
     * @param callId Call Id of the for which user want to see the call records
     * @returns CallDetailRecordBase successful operation
     * @throws ApiError
     */
    static getCallRecordByCallId(acId, callId) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v1/accounts/${acId}/call/${callId}`,
            errors: {
                400: `Bad Request`,
                404: `Not Found`,
                408: `Request Timeout`,
            },
        });
    }
    /**
     * Update voice or video call
     * @param acId
     * @param callId
     * @param requestBody
     * @returns UpdateCallResponse200 successful operation
     * @throws ApiError
     */
    static updateCallRecordByCallIdPutMethod(acId, callId, requestBody) {
        return (0, request_1.request)({
            method: 'PUT',
            path: `/v1/accounts/${acId}/call/${callId}`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Unauthorised`,
                404: `Not Found`,
                408: `Request Timeout`,
            },
        });
    }
    /**
     * Update voice or video call
     * @param acId
     * @param callId
     * @param requestBody
     * @returns UpdateCallResponse200 successful operation
     * @throws ApiError
     */
    static updateCallRecordByCallIdPostMethod(acId, callId, requestBody) {
        return (0, request_1.request)({
            method: 'POST',
            path: `/v1/accounts/${acId}/call/${callId}`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Unauthorised`,
                404: `Not Found`,
                408: `Request Timeout`,
            },
        });
    }
}
exports.CallService = CallService;
